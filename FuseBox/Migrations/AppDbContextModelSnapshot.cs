// <auto-generated />
using System;
using FuseBox.App.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FuseBox.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FuseBox.App.Models.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FuseBoxUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FuseBoxUnitId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("FuseBox.App.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectionPositionId")
                        .HasColumnType("int");

                    b.Property<int>("IndexFinish")
                        .HasColumnType("int");

                    b.Property<int>("IndexStart")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionPositionId")
                        .IsUnique();

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("FuseBox.App.Models.Shild_Comp.Cable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectionCableId")
                        .HasColumnType("int");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Section")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Сolour")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionCableId")
                        .IsUnique();

                    b.ToTable("Cables");
                });

            modelBuilder.Entity("FuseBox.App.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FuseBox.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amper")
                        .HasColumnType("double");

                    b.Property<int?>("ContactorId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<int>("FuseBoxComponentGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("RCDId")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<int>("Slots")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactorId");

                    b.HasIndex("FuseBoxComponentGroupId");

                    b.HasIndex("RCDId");

                    b.ToTable("Component");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Component");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FuseBox.Consumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amper")
                        .HasColumnType("double");

                    b.Property<int?>("FuseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuseId");

                    b.HasIndex("RoomId");

                    b.ToTable("Consumer");
                });

            modelBuilder.Entity("FuseBox.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("FuseBox.FloorGrouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IndividualFloorGrouping")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<bool>("SeparateUZOPerFloor")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("FloorGroupings");
                });

            modelBuilder.Entity("FuseBox.FuseBox.InitialSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainAmperage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("PhasesCount")
                        .HasColumnType("int");

                    b.Property<int>("PowerCoefficient")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ShieldWidth")
                        .HasColumnType("int");

                    b.Property<int>("VoltageStandard")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("InitialSettings");
                });

            modelBuilder.Entity("FuseBox.FuseBoxComponentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FuseBoxComponentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("FuseBoxUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FuseBoxUnitId");

                    b.ToTable("ComponentGroups");
                });

            modelBuilder.Entity("FuseBox.FuseBoxUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CrossModule")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DINLines")
                        .HasColumnType("int");

                    b.Property<bool>("FireUZO")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LoadSwitch")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LoadSwitch2P")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Main3PN")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MainBreaker")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ModularContactor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("NDiscLine")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<bool>("RailMeter")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RailSocket")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SurgeProtection")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ThreePRelay")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("VoltageRelay")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("FuseBoxes", (string)null);
                });

            modelBuilder.Entity("FuseBox.GlobalGrouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Conditioners")
                        .HasColumnType("int");

                    b.Property<int>("Lighting")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Sockets")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("GlobalGroupings");
                });

            modelBuilder.Entity("FuseBox.Port", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CableId")
                        .HasColumnType("int");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PortIn")
                        .HasColumnType("longtext");

                    b.Property<int>("connectionsCount")
                        .HasColumnType("int");

                    b.Property<string>("portOut")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CableId");

                    b.HasIndex("ComponentId");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("FuseBox.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<double>("TotalPower")
                        .HasColumnType("double");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("FuseBox.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("FuseBox.Contactor", b =>
                {
                    b.HasBaseType("FuseBox.Component");

                    b.HasDiscriminator().HasValue("Contactor");
                });

            modelBuilder.Entity("FuseBox.EmptySlot", b =>
                {
                    b.HasBaseType("FuseBox.Component");

                    b.HasDiscriminator().HasValue("EmptySlot");
                });

            modelBuilder.Entity("FuseBox.Fuse", b =>
                {
                    b.HasBaseType("FuseBox.Component");

                    b.HasDiscriminator().HasValue("Fuse");
                });

            modelBuilder.Entity("FuseBox.Introductory", b =>
                {
                    b.HasBaseType("FuseBox.Component");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Introductory");
                });

            modelBuilder.Entity("FuseBox.RCD", b =>
                {
                    b.HasBaseType("FuseBox.Component");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<double>("TotalLoad")
                        .HasColumnType("double");

                    b.HasDiscriminator().HasValue("RCD");
                });

            modelBuilder.Entity("FuseBox.RCDFire", b =>
                {
                    b.HasBaseType("FuseBox.Component");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("Component", t =>
                        {
                            t.Property("Capacity")
                                .HasColumnName("RCDFire_Capacity");
                        });

                    b.HasDiscriminator().HasValue("RCDFire");
                });

            modelBuilder.Entity("FuseBox.App.Models.Connection", b =>
                {
                    b.HasOne("FuseBox.FuseBoxUnit", "FuseBoxUnit")
                        .WithMany("CableConnections")
                        .HasForeignKey("FuseBoxUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuseBoxUnit");
                });

            modelBuilder.Entity("FuseBox.App.Models.Position", b =>
                {
                    b.HasOne("FuseBox.App.Models.Connection", "Connection")
                        .WithOne("CabelWay")
                        .HasForeignKey("FuseBox.App.Models.Position", "ConnectionPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("FuseBox.App.Models.Shild_Comp.Cable", b =>
                {
                    b.HasOne("FuseBox.App.Models.Connection", "Connection")
                        .WithOne("Cable")
                        .HasForeignKey("FuseBox.App.Models.Shild_Comp.Cable", "ConnectionCableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("FuseBox.Component", b =>
                {
                    b.HasOne("FuseBox.Contactor", null)
                        .WithMany("Electricals")
                        .HasForeignKey("ContactorId");

                    b.HasOne("FuseBox.FuseBoxComponentGroup", "FuseBoxComponentGroup")
                        .WithMany("Components")
                        .HasForeignKey("FuseBoxComponentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuseBox.RCD", null)
                        .WithMany("Electricals")
                        .HasForeignKey("RCDId");

                    b.Navigation("FuseBoxComponentGroup");
                });

            modelBuilder.Entity("FuseBox.Consumer", b =>
                {
                    b.HasOne("FuseBox.Fuse", null)
                        .WithMany("Electricals")
                        .HasForeignKey("FuseId");

                    b.HasOne("FuseBox.Room", "Room")
                        .WithMany("Consumer")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("FuseBox.Floor", b =>
                {
                    b.HasOne("FuseBox.Project", "Project")
                        .WithMany("Floors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FuseBox.FloorGrouping", b =>
                {
                    b.HasOne("FuseBox.Project", "Project")
                        .WithOne("FloorGrouping")
                        .HasForeignKey("FuseBox.FloorGrouping", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FuseBox.FuseBox.InitialSettings", b =>
                {
                    b.HasOne("FuseBox.Project", "Project")
                        .WithOne("InitialSettings")
                        .HasForeignKey("FuseBox.FuseBox.InitialSettings", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FuseBox.FuseBoxComponentGroup", b =>
                {
                    b.HasOne("FuseBox.FuseBoxUnit", "FuseBoxUnit")
                        .WithMany("ComponentGroups")
                        .HasForeignKey("FuseBoxUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuseBoxUnit");
                });

            modelBuilder.Entity("FuseBox.FuseBoxUnit", b =>
                {
                    b.HasOne("FuseBox.Project", "Project")
                        .WithOne("FuseBox")
                        .HasForeignKey("FuseBox.FuseBoxUnit", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FuseBox.GlobalGrouping", b =>
                {
                    b.HasOne("FuseBox.Project", "Project")
                        .WithOne("GlobalGrouping")
                        .HasForeignKey("FuseBox.GlobalGrouping", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FuseBox.Port", b =>
                {
                    b.HasOne("FuseBox.App.Models.Shild_Comp.Cable", "cableType")
                        .WithMany()
                        .HasForeignKey("CableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuseBox.Component", "Component")
                        .WithMany("Ports")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("cableType");
                });

            modelBuilder.Entity("FuseBox.Project", b =>
                {
                    b.HasOne("FuseBox.App.Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuseBox.Room", b =>
                {
                    b.HasOne("FuseBox.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("FuseBox.App.Models.Connection", b =>
                {
                    b.Navigation("CabelWay");

                    b.Navigation("Cable");
                });

            modelBuilder.Entity("FuseBox.App.Models.User", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("FuseBox.Component", b =>
                {
                    b.Navigation("Ports");
                });

            modelBuilder.Entity("FuseBox.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("FuseBox.FuseBoxComponentGroup", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("FuseBox.FuseBoxUnit", b =>
                {
                    b.Navigation("CableConnections");

                    b.Navigation("ComponentGroups");
                });

            modelBuilder.Entity("FuseBox.Project", b =>
                {
                    b.Navigation("FloorGrouping")
                        .IsRequired();

                    b.Navigation("Floors");

                    b.Navigation("FuseBox")
                        .IsRequired();

                    b.Navigation("GlobalGrouping")
                        .IsRequired();

                    b.Navigation("InitialSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("FuseBox.Room", b =>
                {
                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("FuseBox.Contactor", b =>
                {
                    b.Navigation("Electricals");
                });

            modelBuilder.Entity("FuseBox.Fuse", b =>
                {
                    b.Navigation("Electricals");
                });

            modelBuilder.Entity("FuseBox.RCD", b =>
                {
                    b.Navigation("Electricals");
                });
#pragma warning restore 612, 618
        }
    }
}
